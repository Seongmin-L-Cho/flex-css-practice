body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}

/* .father {
  display: grid;
  grid-template-columns: 250px 250px 400px;
  column-gap: 10px;
  row-gap: 10px;
} */
/*css grid는 flex만 하면 가운데 box가 비는 등의 문제가 생겨서 도입. 
거의 모든 컨트롤을 father에서 하게됨 */
/* grid-template- : 내가 원하는 grid 갯수와 크기 결정. 만약에 지정을 3개만 했는데, html은 4+a 개면 크기가 순차적으로 반복됨*/
/* gap(column-gap / row-gap): 사이 갭 크기*/
/* .child {
  background: peru;
  color: white;
  font-size: 3px;
  display: flex;
  justify-content: center;
  align-items: center;
} */

.grid {
  display: grid;
  grid-template-columns: auto 200px;

  grid-template-rows: 100px repeat(2, 200px) 100px;
  grid-template-areas:
    "header header header header"
    "content content content nav"
    "content content content nav"
    "footer footer footer footer";
}

/* repeat : 같은걸 반복해서 사용해서 만들때 아주 편함 */
/* grid-template-areas: 레이아웃 만들기. 레이아웃이 어떻게 보여야하는지 지정 가능. 이거만 */

.header {
  background-color: #2ecc71;
  grid-area: header;
}
/* grid-area가 그리드 이름을 결정. grid-template-areas와 연동. 클래스 이름은 이경우 아무것도 안한다*/
.content {
  background-color: #3498db;
  grid-area: content;
}
.nav {
  background-color: #8e44ad;
  grid-area: nav;
}
.footer {
  background-color: #f39c12;
  grid-area: footer;
}
